/*
    Shape
    Archive of Reversing.ID
    Design Pattern (Creational/Prototype)

Compile:
    [gcc]
    $ g++ shape.cpp -o shape

    [msvc]
    $ cl shape.cpp

Run:
    $ shape
*/
#include <iostream>
#include <memory>
#include <unordered_map>

/* *********************************** DECLARATION *********************************** */

class MonsterPrototype
{
protected:            
    std::string     _name;
public:
    MonsterPrototype();
    MonsterPrototype( const MonsterPrototype& copy );
    virtual ~MonsterPrototype();

    virtual auto Clone() -> std::unique_ptr<MonsterPrototype> const = 0;
    void         name( std::string name );
    std::string  name() const;
};

class GreenMonster : public MonsterPrototype
{
protected: 
    int         _numberOfArms;
    double      _slimeAvailable;
public:
    GreenMonster();
    GreenMonster( const GreenMonster& copy );
    ~GreenMonster();

    virtual MonsterPrototype*    Clone() const
    {
        return std::make_unique<GreenMonster>(*this);
    }

    void    NumberOfArms( int numberOfArms );
    void    SlimeAvailable( double slimeAvailable );

    int         NumberOfArms() const;
    double      SlimeAvailable() const;
};

// ======================================================================================

class PurpleMonster : public MonsterPrototype
{
protected:
    int         _intensityOfBadBreath;
    double      _lengthOfWhiplikeAntenna;
public:
    PurpleMonster();
    PurpleMonster( const PurpleMonster& copy );
    ~PurpleMonster();

    virtual MonsterPrototype*    Clone() const
    {
        return std::make_unique<PurpleMonster>(*this);
    }

    void  IntensityOfBadBreath( int intensityOfBadBreath );
    void  LengthOfWhiplikeAntenna( double lengthOfWhiplikeAntenna );

    int       IntensityOfBadBreath() const;
    double    LengthOfWhiplikeAntenna() const;
};

// ======================================================================================

class BellyMonster : public MonsterPrototype
{
protected:
    double      _roomAvailableInBelly;
public:
    BellyMonster();
    BellyMonster( const BellyMonster& copy );
    ~BellyMonster();

    virtual MonsterPrototype*    Clone() const
    {
        return std::make_unique<BellyMonster>(*this);
    }

    void       RoomAvailableInBelly( double roomAvailableInBelly );
    double     RoomAvailableInBelly() const;
};
// ======================================================================================

enum ShapeType { RECTANGLE, CIRCLE };

/**
 * ShapeFactory
 * 
 * sebuah factory yang berperan sebagai registry untuk menyimpan prototype dan melakukan
 * penciptaan objek baru (clone).
 * 
 * Tugas factory hanya membantu untuk menciptakan objek yang sesuai karena penciptaan objek
 * diimplementasikan dengan Prototype.
 */
class ShapeFactory
{
    std::unordered_map<ShapeType, std::unique_ptr<Shape>, std::hash<int>> _records;

public:
    ShapeFactory()
    {
        _records[RECTANGLE] = std::make_unique<Rectangle>(10, 20);
        _records[CIRCLE]    = std::make_unique<Circle>(10);
    }

    auto create(ShapeType type) -> std::unique_ptr<Shape>
    {
        return _records[type]->clone();
    }
};


/* *********************************** USAGE *********************************** */

int main()
{
    ShapeFactory factory;

    auto record = factory.create(RECTANGLE);
    record->print();

    record = factory.create(CIRCLE);
    record->print();

    return 0;
}